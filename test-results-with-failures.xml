<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="4" skipped="0" tests="15" time="0.166" timestamp="2025-07-09T11:13:41.426170+01:00" hostname="Gianpaolo"><testcase classname="test_app_pytest.TestAdd" name="test_add_positive_numbers" time="0.001" /><testcase classname="test_app_pytest.TestAdd" name="test_add_negative_numbers" time="0.001" /><testcase classname="test_app_pytest.TestAdd" name="test_add_mixed_numbers" time="0.000" /><testcase classname="test_app_pytest.TestAdd" name="test_add_zero" time="0.000" /><testcase classname="test_app_pytest.TestAdd" name="test_add_large_numbers" time="0.000" /><testcase classname="test_app_pytest.TestAdd" name="test_add_parametrized[1-2-3]" time="0.001" /><testcase classname="test_app_pytest.TestAdd" name="test_add_parametrized[0-0-0]" time="0.001" /><testcase classname="test_app_pytest.TestAdd" name="test_add_parametrized[-1-1-0]" time="0.001" /><testcase classname="test_app_pytest.TestAdd" name="test_add_parametrized[100--50-50]" time="0.001" /><testcase classname="test_app_pytest.TestAdd" name="test_add_parametrized[2.5-3.5-6.0]" time="0.001" /><testcase classname="test_app_pytest.TestMultiply" name="test_multiply_positive" time="0.001"><failure message="assert 7 == 12&#10; +  where 7 = multiply(3, 4)">test_app_pytest.py:51: in test_multiply_positive
    assert multiply(3, 4) == 12  # This will fail! (7 != 12)
E   assert 7 == 12
E    +  where 7 = multiply(3, 4)</failure></testcase><testcase classname="test_app_pytest.TestMultiply" name="test_multiply_with_zero" time="0.001"><failure message="assert 5 == 0&#10; +  where 5 = multiply(5, 0)">test_app_pytest.py:56: in test_multiply_with_zero
    assert multiply(5, 0) == 0   # This will fail! (5 != 0)
E   assert 5 == 0
E    +  where 5 = multiply(5, 0)</failure></testcase><testcase classname="test_app_pytest.TestMultiply" name="test_multiply_negative" time="0.001"><failure message="assert 1 == -6&#10; +  where 1 = multiply(-2, 3)">test_app_pytest.py:61: in test_multiply_negative
    assert multiply(-2, 3) == -6  # This will fail! (1 != -6)
E   assert 1 == -6
E    +  where 1 = multiply(-2, 3)</failure></testcase><testcase classname="test_app_pytest.TestAllFunctions" name="test_basic_operations" time="0.001"><failure message="assert 10 == 21&#10; +  where 10 = multiply(3, 7)">test_app_pytest.py:71: in test_basic_operations
    assert multiply(3, 7) == 21  # This will fail! (10 != 21)
E   assert 10 == 21
E    +  where 10 = multiply(3, 7)</failure></testcase><testcase classname="test_app_pytest.TestAllFunctions" name="test_calculator_class" time="0.001" /></testsuite></testsuites>